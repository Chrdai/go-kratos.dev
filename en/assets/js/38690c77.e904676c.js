"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3562],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var l=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,l,o=function(e,n){if(null==e)return{};var t,l,o={},r=Object.keys(e);for(l=0;l<r.length;l++)t=r[l],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)t=r[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var g=l.createContext({}),s=function(e){var n=l.useContext(g),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=s(e.components);return l.createElement(g.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},p=l.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,g=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=s(t),d=o,m=p["".concat(g,".").concat(d)]||p[d]||c[d]||r;return t?l.createElement(m,a(a({ref:n},u),{},{components:t})):l.createElement(m,a({ref:n},u))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,a=new Array(r);a[0]=p;var i={};for(var g in n)hasOwnProperty.call(n,g)&&(i[g]=n[g]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var s=2;s<r;s++)a[s]=t[s];return l.createElement.apply(null,a)}return l.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1249:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return g},metadata:function(){return s},toc:function(){return u},default:function(){return p}});var l=t(3117),o=t(102),r=(t(7294),t(3905)),a=["components"],i={id:"log",title:"Logger",description:"Kratos contains only the simplest Log interface for business-adapted log access. When your business logic needs to use custom logs inside the kratos framework, you only need to implement the Log method simply.",keywords:["Go","Kratos","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"]},g=void 0,s={unversionedId:"component/log",id:"component/log",isDocsHomePage:!1,title:"Logger",description:"Kratos contains only the simplest Log interface for business-adapted log access. When your business logic needs to use custom logs inside the kratos framework, you only need to implement the Log method simply.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/component/log.md",sourceDirName:"component",slug:"/component/log",permalink:"/en/docs/component/log",editUrl:"https://github.com/go-kratos/go-kratos.dev/edit/main/i18n/en/docusaurus-plugin-content-docs/current/component/log.md",tags:[],version:"current",frontMatter:{id:"log",title:"Logger",description:"Kratos contains only the simplest Log interface for business-adapted log access. When your business logic needs to use custom logs inside the kratos framework, you only need to implement the Log method simply.",keywords:["Go","Kratos","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"]},sidebar:"docs",previous:{title:"Config",permalink:"/en/docs/component/config"},next:{title:"Metrics",permalink:"/en/docs/component/metrics"}},u=[{value:"Interface",id:"interface",children:[],level:3},{value:"Implementation",id:"implementation",children:[{value:"Implement logger",id:"implement-logger",children:[],level:4},{value:"Implement valuer",id:"implement-valuer",children:[],level:4}],level:3},{value:"Usage",id:"usage",children:[{value:"Print log with Logger",id:"print-log-with-logger",children:[],level:4},{value:"Print log with Helper",id:"print-log-with-helper",children:[],level:4},{value:"Add some default fields with Valuer",id:"add-some-default-fields-with-valuer",children:[],level:4},{value:"Log to multiple loggers",id:"log-to-multiple-loggers",children:[],level:4},{value:"Bind context to logger",id:"bind-context-to-logger",children:[],level:4},{value:"Log Filtering",id:"log-filtering",children:[{value:"Filter by level",id:"filter-by-level",children:[],level:5},{value:"Filter by key",id:"filter-by-key",children:[],level:5},{value:"Filter by value",id:"filter-by-value",children:[],level:5},{value:"Filter with hook function",id:"filter-with-hook-function",children:[],level:5}],level:4},{value:"Print to STDOUT",id:"print-to-stdout",children:[],level:4},{value:"Print to fluentd",id:"print-to-fluentd",children:[],level:4}],level:3},{value:"Advanced Usage",id:"advanced-usage",children:[{value:"Implement Zap Logger",id:"implement-zap-logger",children:[],level:4}],level:3}],c={toc:u};function p(e){var n=e.components,t=(0,o.Z)(e,a);return(0,r.kt)("wrapper",(0,l.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"interface"},"Interface"),(0,r.kt)("p",null,"Kratos contains only the simplest Log interface for business-adapted log access. When your business logic needs to use custom logs inside the kratos framework, you only need to implement the Log method simply. Kratos logs also provide some log helpful features such as valuer, helper, filter, and so on, which can be implemented directly using the framework's built-in implementations when we need them, or by ourselves."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type Logger interface {\n    Log(level Level, keyvals ...interface{}) error\n}\n")),(0,r.kt)("h3",{id:"implementation"},"Implementation"),(0,r.kt)("h4",{id:"implement-logger"},"Implement logger"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// https://github.com/go-kratos/kratos/blob/main/log/std.go\nvar _ Logger = (*stdLogger)(nil)\n\ntype stdLogger struct {\n    log  *log.Logger\n    pool *sync.Pool\n}\n\n// NewStdLogger new a logger with writer.\nfunc NewStdLogger(w io.Writer) Logger {\n    return &stdLogger{\n        log: log.New(w, "", 0),\n        pool: &sync.Pool{\n            New: func() interface{} {\n                return new(bytes.Buffer)\n            },\n        },\n    }\n}\n\n// Log print the kv pairs log.\nfunc (l *stdLogger) Log(level Level, keyvals ...interface{}) error {\n    if len(keyvals) == 0 {\n        return nil\n    }\n    if len(keyvals)%2 != 0 {\n        keyvals = append(keyvals, "")\n    }\n    buf := l.pool.Get().(*bytes.Buffer)\n    buf.WriteString(level.String())\n    for i := 0; i < len(keyvals); i += 2 {\n        fmt.Fprintf(buf, " %s=%v", keyvals[i], keyvals[i+1])\n    }\n    l.log.Output(4, buf.String())~~~~\n    buf.Reset()\n    l.pool.Put(buf)\n    return nil\n}\n')),(0,r.kt)("h4",{id:"implement-valuer"},"Implement valuer"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func Timestamp(layout string) Valuer {\n    return func(context.Context) interface{} {\n        return time.Now().Format(layout)\n    }\n}\n")),(0,r.kt)("h3",{id:"usage"},"Usage"),(0,r.kt)("h4",{id:"print-log-with-logger"},"Print log with Logger"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'logger := log.DefaultLogger\nlogger.Log(LevelInfo, "key1", "value1")\n')),(0,r.kt)("h4",{id:"print-log-with-helper"},"Print log with Helper"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'log := log.NewHelper(DefaultLogger)\nlog.Debug("test debug")\nlog.Info("test info")\nlog.Warn("test warn")\nlog.Error("test error")\n')),(0,r.kt)("h4",{id:"add-some-default-fields-with-valuer"},"Add some default fields with Valuer"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'logger := DefaultLogger\nlogger = With(logger, "ts", DefaultTimestamp, "caller", DefaultCaller)\nlogger.Log(LevelInfo, "msg", "helloworld")\n')),(0,r.kt)("h4",{id:"log-to-multiple-loggers"},"Log to multiple loggers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'out := log.NewStdLogger(os.Stdout)\nerr := log.NewStdLogger(os.Stderr)\nl := log.With(MultiLogger(out, err))\nl.Log(LevelInfo, "msg", "test")\n')),(0,r.kt)("h4",{id:"bind-context-to-logger"},"Bind context to logger"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'logger := log.With(NewStdLogger(os.Stdout),\n    "trace", Trace(),\n)\nlog := log.NewHelper(logger)\nctx := context.WithValue(context.Background(), "trace_id", "2233")\nlog.WithContext(ctx).Info("got trace!")\n')),(0,r.kt)("h4",{id:"log-filtering"},"Log Filtering"),(0,r.kt)("p",null,"If you need to filter some fields in the log that should not be printed in plain text, such as password, you can do so by log. NewFilter() implements filtering."),(0,r.kt)("h5",{id:"filter-by-level"},"Filter by level"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'l := log.NewHelper(log.NewFilter(log.DefaultLogger, log.FilterLevel(log.LevelWarn)))\nl.Log(LevelDebug, "msg1", "te1st debug")\nl.Debug("test debug")\nl.Debugf("test %s", "debug")\nl.Debugw("log", "test debug")\nl.Warn("warn log")\n')),(0,r.kt)("h5",{id:"filter-by-key"},"Filter by key"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'l := log.NewHelper(log.NewFilter(log.DefaultLogger, log.FilterKey("password")))\nl.Debugw("password", "123456")\n')),(0,r.kt)("h5",{id:"filter-by-value"},"Filter by value"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'l := log.NewHelper(log.NewFilter(log.DefaultLogger, log.FilterValue("kratos")))\nl.Debugw("name", "kratos")\n')),(0,r.kt)("h5",{id:"filter-with-hook-function"},"Filter with hook function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'l := log.NewHelper(log.NewFilter(log.DefaultLogger, log.FilterFunc(testFilterFunc)))\nl.Debug("debug level")\nl.Infow("password", "123456")\nfunc testFilterFunc(level Level, keyvals ...interface{}) bool {\n    if level == LevelWarn {\n        return true\n    }\n    for i := 0; i < len(keyvals); i++ {\n        if keyvals[i] == "password" {\n            keyvals[i+1] = "***"\n        }\n    }\n    return false\n}\n')),(0,r.kt)("h4",{id:"print-to-stdout"},"Print to STDOUT"),(0,r.kt)("p",null,"You can create standard output log objects using the StdLogger that comes with it. With the NewHelper log module, Helper generates log modules that provide different levels of log output."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'logger := log.NewStdLogger()\nlog := log.NewHelper(logger)\n// Levels\nlog.Info("some log")\nlog.Infof("format %s", "some log")\nlog.Infow("field_name", "some log")\n')),(0,r.kt)("h4",{id:"print-to-fluentd"},"Print to fluentd"),(0,r.kt)("p",null,"Import fluent sdk"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import "github.com/go-kratos/fluent"\n\naddr := "unix:///var/run/fluent/fluent.sock"\nlogger,err := fluent.NewLogger(addr)\nif err != nil {\n    return \n}\nlog := log.NewHelper(logger)\n// Levels\nlog.Info("some log")\nlog.Infof("format %s", "some log")\nlog.Infow("field_name", "some log")\n')),(0,r.kt)("h3",{id:"advanced-usage"},"Advanced Usage"),(0,r.kt)("h4",{id:"implement-zap-logger"},"Implement Zap Logger"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'var _ log.Logger = (*ZapLogger)(nil)\n\ntype ZapLogger struct {\n    log  *zap.Logger\n    Sync func() error\n}\n\n// NewZapLogger return ZapLogger\nfunc NewZapLogger(encoder zapcore.EncoderConfig, level zap.AtomicLevel, opts ...zap.Option) *ZapLogger {\n    core := zapcore.NewCore(\n        zapcore.NewConsoleEncoder(encoder),\n        zapcore.NewMultiWriteSyncer(\n            zapcore.AddSync(os.Stdout),\n        ), level)\n    zapLogger := zap.New(core, opts...)\n    return &ZapLogger{log: zapLogger, Sync: zapLogger.Sync}\n}\n\n// Log Implementation of logger interface\nfunc (l *ZapLogger) Log(level log.Level, keyvals ...interface{}) error {\n    if len(keyvals) == 0 || len(keyvals)%2 != 0 {\n        l.log.Warn(fmt.Sprint("Keyvalues must appear in pairs: ", keyvals))\n        return nil\n    }\n\n    // Zap.Field is used when keyvals pairs appear\n    var data []zap.Field\n    for i := 0; i < len(keyvals); i += 2 {\n        data = append(data, zap.Any(fmt.Sprint(keyvals[i]), fmt.Sprint(keyvals[i+1])))\n    }\n    switch level {\n    case log.LevelDebug:\n        l.log.Debug("", data...)\n    case log.LevelInfo:\n        l.log.Info("", data...)\n    case log.LevelWarn:\n        l.log.Warn("", data...)\n    case log.LevelError:\n        l.log.Error("", data...)\n    }\n    return nil\n}\n')))}p.isMDXComponent=!0}}]);