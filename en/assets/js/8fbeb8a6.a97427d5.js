(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{116:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return m}));var r=t(0),o=t.n(r);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=o.a.createContext({}),l=function(e){var n=o.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return o.a.createElement(s.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},g=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,c=e.originalType,a=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),p=l(t),g=r,m=p["".concat(a,".").concat(g)]||p[g]||f[g]||c;return t?o.a.createElement(m,i(i({ref:n},s),{},{components:t})):o.a.createElement(m,i({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var c=t.length,a=new Array(c);a[0]=g;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var s=2;s<c;s++)a[s]=t[s];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},96:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return i})),t.d(n,"toc",(function(){return u})),t.d(n,"default",(function(){return l}));var r=t(3),o=t(7),c=(t(0),t(116)),a={id:"config",title:"Config"},i={unversionedId:"component/config",id:"component/config",isDocsHomePage:!1,title:"Config",description:"Usage",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/component/config.md",sourceDirName:"component",slug:"/component/config",permalink:"/en/docs/component/config",editUrl:"https://github.com/go-kratos/go-kratos.dev/edit/main/i18n/en/docusaurus-plugin-content-docs/current/component/config.md",version:"current",frontMatter:{id:"config",title:"Config"},sidebar:"docs",previous:{title:"Errors",permalink:"/en/docs/component/errors"},next:{title:"Logging",permalink:"/en/docs/component/logging"}},u=[{value:"Usage",id:"usage",children:[]}],s={toc:u};function l(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("h3",{id:"usage"},"Usage"),Object(c.b)("p",null,"One or more config sources can be applied. They will be merged into map","[string]","interface{}, then you could use Scan or Value to get the values."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-go"},'c := config.New(\n    config.WithSource(\n        file.NewSource(path),\n    ),\n    config.WithDecoder(func(kv *config.KeyValue, v map[string]interface{}) error {\n        // kv.Key\n        // kv.Value\n        // kv.Metadata\n        // Configuration center can use the metadata to determine the type of the config.\n        return yaml.Unmarshal(kv.Value, v)\n    }),\n)\n// load config source\nif err := c.Load(); err != nil {\n    panic(err)\n}\n// get value\nname, err := c.Value("service").String()\n// parse the values to the struct. (the json tags are required for parsing)\nvar v struct {\n    Service string `json:"service"`\n    Version string `json:"version"`\n}\nif err := c.Scan(&v); err != nil {\n    panic(err)\n}\n// watch the changing of the value\nc.Watch("service.name", func(key string, value config.Value) {\n    // callback of this event\n})\n')))}l.isMDXComponent=!0}}]);