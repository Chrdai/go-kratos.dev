(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9508],{3905:function(e,r,t){"use strict";t.d(r,{Zo:function(){return p},kt:function(){return u}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=n.createContext({}),g=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},p=function(e){var r=g(e.components);return n.createElement(c.Provider,{value:r},e.children)},s={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=g(t),u=o,m=d["".concat(c,".").concat(u)]||d[u]||s[u]||i;return t?n.createElement(m,a(a({ref:r},p),{},{components:t})):n.createElement(m,a({ref:r},p))}));function u(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var g=2;g<i;g++)a[g]=t[g];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6046:function(e,r,t){"use strict";t.r(r),t.d(r,{frontMatter:function(){return a},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return g},default:function(){return s}});var n=t(2122),o=t(9756),i=(t(7294),t(3905)),a={id:"logging",title:"Logging",keywords:["Go","Kratos","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"]},l=void 0,c={unversionedId:"component/middleware/logging",id:"component/middleware/logging",isDocsHomePage:!1,title:"Logging",description:"Logging middleware is used to print the details of requests received or initiated by the service.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/component/middleware/logging.md",sourceDirName:"component/middleware",slug:"/component/middleware/logging",permalink:"/en/docs/component/middleware/logging",editUrl:"https://github.com/go-kratos/go-kratos.dev/edit/main/i18n/en/docusaurus-plugin-content-docs/current/component/middleware/logging.md",tags:[],version:"current",frontMatter:{id:"logging",title:"Logging",keywords:["Go","Kratos","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"]},sidebar:"docs",previous:{title:"Overview",permalink:"/en/docs/component/middleware/overview"},next:{title:"Metrics",permalink:"/en/docs/component/middleware/metrics"}},g=[{value:"Usage",id:"usage",children:[]}],p={toc:g};function s(e){var r=e.components,t=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Logging middleware is used to print the details of requests received or initiated by the service."),(0,i.kt)("h3",{id:"usage"},"Usage"),(0,i.kt)("h4",{id:"grpc-server"},"gRPC server"),(0,i.kt)("p",null,"By passing ",(0,i.kt)("inlineCode",{parentName:"p"},"logging.Server()")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"grpc.ServerOption"),", Kratos will print detailed request information every time a gRPC request is received."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"logger := log.DefaultLogger\nvar opts = []grpc.ServerOption{\n    grpc.Middleware(\n        logging.Server(logger),\n    ),\n}\nsrv := grpc.NewServer(opts...)\n")),(0,i.kt)("h4",{id:"grpc-client"},"gRPC client"),(0,i.kt)("p",null,"By passing ",(0,i.kt)("inlineCode",{parentName:"p"},"logging.Client()")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"grpc.WithMiddleware"),", Kratos will print detailed request information every time a grpc request is initiated."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"logger := log.DefaultLogger\nvar opts = []http.ServerOption{\n    http.Middleware(\n        logging.Server(logger),\n    ),\n}\nsrv := http.NewServer(opts...)\n")),(0,i.kt)("h4",{id:"http-client"},"HTTP client"),(0,i.kt)("p",null,"By passing ",(0,i.kt)("inlineCode",{parentName:"p"},"logging.Client()")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"http.WithMiddleware"),", Kratos will print detailed request information every time an Http request is initiated."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'logger := log.DefaultLogger\nconn, err := http.NewClient(\n    context.Background(),\n    http.WithMiddleware(\n        logging.Client(logger),\n    ),\n    http.WithEndpoint("127.0.0.1:8000"),\n)\n')),(0,i.kt)("p",null,"The Logging middleware only prints ",(0,i.kt)("inlineCode",{parentName:"p"},"trace_id")," in the server and does not collect data."),(0,i.kt)("h4",{id:"grpc-server-1"},"grpc-server"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'// internal/server/grpc.go\n\nexporter, err := stdouttrace.New(stdouttrace.WithWriter(ioutil.Discard))\nif err != nil {\n    fmt.Printf("creating stdout exporter: %v", err)\n    panic(err)\n}\n\ntp := tracesdk.NewTracerProvider(\n    tracesdk.WithBatcher(exporter),\n    tracesdk.WithResource(resource.NewSchemaless(\n        semconv.ServiceNameKey.String(Name)),\n    )\n)\n\nvar opts = []grpc.ServerOption{\n  grpc.Middleware(\n    tracing.Server(tracing.WithTracerProvider(tp)),\n  ),\n}\n\nsrv := grpc.NewServer(opts...)\n')),(0,i.kt)("p",null,"Add the ",(0,i.kt)("inlineCode",{parentName:"p"},"trace_id")," field to the output log"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'// cmd/project_name/main.go\n\nlogger := log.With(\n  log.NewStdLogger(os.Stdout),\n  "ts", log.DefaultTimestamp,\n  "caller", log.DefaultCaller,\n  "service.id", id,\n  "service.name", Name,\n  "service.version", Version,\n  "trace_id", log.TraceID(),\n  "span_id", log.SpanID(),\n)\n')),(0,i.kt)("p",null,"Log ",(0,i.kt)("inlineCode",{parentName:"p"},"trace_id")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'log.WithContext(ctx).Errorf("Field created: %s", err)\n')))}s.isMDXComponent=!0}}]);