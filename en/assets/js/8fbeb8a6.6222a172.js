(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7866],{3905:function(e,n,r){"use strict";r.d(n,{Zo:function(){return l},kt:function(){return g}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function c(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?c(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},c=Object.keys(e);for(t=0;t<c.length;t++)r=c[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(t=0;t<c.length;t++)r=c[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=t.createContext({}),s=function(e){var n=t.useContext(u),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},l=function(e){var n=s(e.components);return t.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,c=e.originalType,u=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),f=s(r),g=o,m=f["".concat(u,".").concat(g)]||f[g]||p[g]||c;return r?t.createElement(m,i(i({ref:n},l),{},{components:r})):t.createElement(m,i({ref:n},l))}));function g(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var c=r.length,i=new Array(c);i[0]=f;var a={};for(var u in n)hasOwnProperty.call(n,u)&&(a[u]=n[u]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var s=2;s<c;s++)i[s]=r[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},4460:function(e,n,r){"use strict";r.r(n),r.d(n,{frontMatter:function(){return i},metadata:function(){return a},toc:function(){return u},default:function(){return l}});var t=r(2122),o=r(9756),c=(r(7294),r(3905)),i={id:"config",title:"Config"},a={unversionedId:"component/config",id:"component/config",isDocsHomePage:!1,title:"Config",description:"Usage",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/component/config.md",sourceDirName:"component",slug:"/component/config",permalink:"/en/docs/component/config",editUrl:"https://github.com/go-kratos/go-kratos.dev/edit/main/i18n/en/docusaurus-plugin-content-docs/current/component/config.md",version:"current",frontMatter:{id:"config",title:"Config"},sidebar:"docs",previous:{title:"Errors",permalink:"/en/docs/component/errors"},next:{title:"Log",permalink:"/en/docs/component/log"}},u=[{value:"Usage",id:"usage",children:[]}],s={toc:u};function l(e){var n=e.components,r=(0,o.Z)(e,["components"]);return(0,c.kt)("wrapper",(0,t.Z)({},s,r,{components:n,mdxType:"MDXLayout"}),(0,c.kt)("h3",{id:"usage"},"Usage"),(0,c.kt)("p",null,"One or more config sources can be applied. They will be merged into map","[string]","interface{}, then you could use Scan or Value to get the values."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-go"},'c := config.New(\n    config.WithSource(\n        file.NewSource(path),\n    ),\n    config.WithDecoder(func(kv *config.KeyValue, v map[string]interface{}) error {\n        // kv.Key\n        // kv.Value\n        // kv.Metadata\n        // Configuration center can use the metadata to determine the type of the config.\n        return yaml.Unmarshal(kv.Value, v)\n    }),\n)\n// load config source\nif err := c.Load(); err != nil {\n    panic(err)\n}\n// get value\nname, err := c.Value("service").String()\n// parse the values to the struct. (the json tags are required for parsing)\nvar v struct {\n    Service string `json:"service"`\n    Version string `json:"version"`\n}\nif err := c.Scan(&v); err != nil {\n    panic(err)\n}\n// watch the changing of the value\nc.Watch("service.name", func(key string, value config.Value) {\n    // callback of this event\n})\n')))}l.isMDXComponent=!0}}]);