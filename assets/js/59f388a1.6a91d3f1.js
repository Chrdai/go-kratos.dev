(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{116:function(e,r,t){"use strict";t.d(r,"a",(function(){return u})),t.d(r,"b",(function(){return m}));var n=t(0),o=t.n(n);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function p(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=o.a.createContext({}),s=function(e){var r=o.a.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},u=function(e){var r=s(e.components);return o.a.createElement(l.Provider,{value:r},e.children)},g={inlineCode:"code",wrapper:function(e){var r=e.children;return o.a.createElement(o.a.Fragment,{},r)}},d=o.a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=s(t),d=n,m=u["".concat(i,".").concat(d)]||u[d]||g[d]||a;return t?o.a.createElement(m,c(c({ref:r},l),{},{components:t})):o.a.createElement(m,c({ref:r},l))}));function m(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var a=t.length,i=new Array(a);i[0]=d;var c={};for(var p in r)hasOwnProperty.call(r,p)&&(c[p]=r[p]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var l=2;l<a;l++)i[l]=t[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},88:function(e,r,t){"use strict";t.r(r),t.d(r,"frontMatter",(function(){return i})),t.d(r,"metadata",(function(){return c})),t.d(r,"toc",(function(){return p})),t.d(r,"default",(function(){return s}));var n=t(3),o=t(7),a=(t(0),t(116)),i={id:"tracing",title:"Tracing",keywords:["Go","Kratos","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"]},c={unversionedId:"component/tracing",id:"component/tracing",isDocsHomePage:!1,title:"Tracing",description:"\u914d\u7f6e",source:"@site/docs/component/tracing.md",sourceDirName:"component",slug:"/component/tracing",permalink:"/docs/component/tracing",editUrl:"https://github.com/go-kratos/go-kratos.dev/edit/main/docs/component/tracing.md",version:"current",frontMatter:{id:"tracing",title:"Tracing",keywords:["Go","Kratos","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"]},sidebar:"docs",previous:{title:"Metrics",permalink:"/docs/component/metrics"},next:{title:"Registry",permalink:"/docs/component/registry"}},p=[{value:"\u914d\u7f6e",id:"\u914d\u7f6e",children:[]},{value:"WithTracerProvider",id:"withtracerprovider",children:[]},{value:"WithPropagators",id:"withpropagators",children:[]},{value:"\u4f7f\u7528\u65b9\u6cd5",id:"\u4f7f\u7528\u65b9\u6cd5",children:[]},{value:"References",id:"references",children:[]}],l={toc:p};function s(e){var r=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},l,t,{components:r,mdxType:"MDXLayout"}),Object(a.b)("h3",{id:"\u914d\u7f6e"},"\u914d\u7f6e"),Object(a.b)("p",null,"Kratos tracing \u4e2d\u95f4\u4ef6\u4f7f\u7528 opentelemetry \u5b9e\u73b0\u4e86\u94fe\u8def\u8ffd\u8e2a,\u5206\u522b\u5b9e\u73b0\u4e86 client/server \u7684\u4e2d\u95f4\u4ef6\u5e76\u63d0\u4f9b\u4e86 WithTracerProvider, WithPropagators \u4e24\u4e2a\u914d\u7f6e\u65b9\u6cd5."),Object(a.b)("h3",{id:"withtracerprovider"},"WithTracerProvider"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-go"},"func WithTracerProvider(provider trace.TracerProvider) Option {\n    return func(opts *options) {\n        opts.TracerProvider = provider\n    }\n}    \n")),Object(a.b)("p",null,"WithTracerProvider \u7528\u4e8e\u8bbe\u7f6e tracing \u7684\u94fe\u8def\u8ffd\u8e2a\u7a0b\u5e8f\u7684\u63d0\u4f9b\u8005,\u8be5\u65b9\u6cd5\u63a5\u6536\u4e00\u4e2a trace.TracerProvider."),Object(a.b)("h3",{id:"withpropagators"},"WithPropagators"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-go"},"func WithPropagators(propagators propagation.TextMapPropagator) Option {\n    return func(opts *options) {\n        opts.Propagators = propagators\n    }\n}\n")),Object(a.b)("p",null,"WithPropagators \u7528\u4e8e\u8bbe\u7f6e tracing \u7684\u6587\u672c\u6620\u5c04\u7684\u4f20\u64ad\u5668,\u8be5\u65b9\u6cd5\u63a5\u6536\u4e00\u4e2a propagation.TextMapPropagator"),Object(a.b)("h3",{id:"\u4f7f\u7528\u65b9\u6cd5"},"\u4f7f\u7528\u65b9\u6cd5"),Object(a.b)("h4",{id:"server-\u4e2d\u4f7f\u7528-tracing-\u91c7\u96c6\u6570\u636e"},"server \u4e2d\u4f7f\u7528 tracing \u91c7\u96c6\u6570\u636e"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-go"},'package server\n\nfunc initTracer() func() {\n    // \u521b\u5efa\u4e00\u4e2a jaeger \u7684 pipeline,\u5176\u4ed6\u6536\u96c6\u65b9\u5f0f\u53ef\u4ee5\u67e5\u770b opentelemetry \u6587\u6863\n    flush, err := jaeger.InstallNewPipeline(\n        jaeger.WithCollectorEndpoint("http://localhost:14268/api/traces"),\n        jaeger.WithSDKOptions(\n            sdktrace.WithSampler(sdktrace.AlwaysSample()),\n            sdktrace.WithResource(resource.NewWithAttributes(\n                semconv.ServiceNameKey.String("kratos-trace"),\n                attribute.String("exporter", "jaeger"),\n                attribute.Float64("float", 312.23),\n            )),\n        ),\n    )\n    if err != nil {\n        log.Fatal(err)\n    }\n    return flush\n}\n// NewGRPCServer new a gRPC server.\nfunc NewGRPCServer(c *conf.Server, executor *service.ExecutorService) *grpc.Server {\n    flush := initTracer()\n    defer flush()\n    //tr := otel.Tracer("component-main")\n    var opts = []grpc.ServerOption{\n        grpc.Middleware(\n            middleware.Chain(\n                tracing.Server(tracing.WithTracerProvider(otel.GetTracerProvider())),\n            ),\n        ),\n    }\n   // ...\n}\n')),Object(a.b)("h4",{id:"client-\u4e2d\u4f7f\u7528-tracing-\u91c7\u96c6\u6570\u636e"},"client \u4e2d\u4f7f\u7528 tracing \u91c7\u96c6\u6570\u636e"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-go"},'\nfunc initTracer() func() {\n    // \u521b\u5efa\u4e00\u4e2a jaeger \u7684 pipeline,\u5176\u4ed6\u6536\u96c6\u65b9\u5f0f\u53ef\u4ee5\u67e5\u770b opentelemetry \u6587\u6863\n    flush, err := jaeger.InstallNewPipeline(\n        jaeger.WithCollectorEndpoint("http://localhost:14268/api/traces"),\n        jaeger.WithSDKOptions(\n            sdktrace.WithSampler(sdktrace.AlwaysSample()),\n            sdktrace.WithResource(resource.NewWithAttributes(\n                semconv.ServiceNameKey.String("kratos-trace"),\n                attribute.String("exporter", "jaeger"),\n                attribute.Float64("float", 312.23),\n            )),\n        ),\n    )\n    if err != nil {\n        log.Fatal(err)\n    }\n    return flush\n}\nfunc grpcCli() (*grpc.ClientConn, error) {\n    return grpc.DialInsecure(\n        context.Background(),\n        grpc.WithMiddleware(\n            tracing.Client(\n                tracing.WithTracerProvider(\n                    otel.GetTracerProvider(),\n                ),\n            ),\n        ),\n    )\n}\n')),Object(a.b)("h3",{id:"references"},"References"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"https://opentelemetry.io/"},"https://opentelemetry.io/")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"https://github.com/open-telemetry/opentelemetry-go/tree/main/example"},"https://github.com/open-telemetry/opentelemetry-go/tree/main/example")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"https://pkg.go.dev/go.opentelemetry.io/otel"},"https://pkg.go.dev/go.opentelemetry.io/otel"))))}s.isMDXComponent=!0}}]);